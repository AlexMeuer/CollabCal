import { z } from "zod";

export const ryEvent = z.object({
  id: z.string(),
  starts_at: z.string(),
  ends_at: z.string(),
  index: z.string(),
  effective_lock_rsvps: z.boolean(),
  rsvp_yes_count: z.number(),
  rsvp_maybe_count: z.number(),
  rsvp_no_count: z.number(),
  has_previous: z.boolean(),
  has_next: z.boolean(),
  attendees: z.array(z.object({ id: z.number(), avatar_url: z.string() })),
  post: z.object({
    poll_color: z.string(),
    device_client: z.string(),
    device_platform: z.string(),
    has_legacy_html: z.boolean(),
    content_type: z.string(),
    created_at: z.string(),
    creator_id: z.number(),
    space_id: z.number(),
    filter_group: z.string(),
    featured_index: z.number().optional(),
    last_activity_at: z.string(),
    last_edited_at: z.string(),
    updated_at: z.string(),
    post_type: z.string(),
    slug: z.string(),
    position: z.number(),
    is_host_post: z.boolean(),
    published_at: z.string(),
    hidden_from_feed: z.boolean(),
    restricted_event: z.boolean(),
    lock_rsvps: z.boolean(),
    has_processing_media: z.boolean(),
    id: z.number(),
    status: z.string(),
    comments_enabled: z.boolean(),
    cheers_enabled: z.boolean(),
    content: z.object({
      asset_ids: z.array(z.unknown()),
      id: z.number(),
      human_type: z.string(),
      kind: z.string(),
      title: z.string(),
      description: z.string(),
      content_type: z.string(),
      is_video: z.boolean(),
      time_zone: z.string(),
      data: z.object({}),
      rsvp_enabled: z.boolean(),
      external_event_link_type: z.string().optional(),
      external_event_link: z.string().optional(),
      external_event_link_text: z.string().optional(),
      event_type: z.string(),
      starts_at: z.string(),
      ends_at: z.string(),
      google_calendar_url: z.string().optional(),
    }),
    content_id: z.number(),
    visible_globally: z.boolean(),
    is_trending: z.boolean(),
    is_all_time_favorite: z.boolean(),
    sharing_meta: z.object({
      title: z.string(),
      description: z.string(),
      type: z.string(),
      url: z.string(),
      image_url: z.string(),
      context: z.string(),
      prefill_text: z.string(),
      app_link_app_name: z.string(),
      app_link_url: z.string(),
      app_link_app_store_id: z.string(),
      app_link_android_package: z.string(),
      image_width: z.number(),
      image_height: z.number(),
    }),
    page_meta: z.object({ title: z.string(), description: z.string() }),
    is_video: z.boolean(),
    starts_at: z.string(),
    ends_at: z.string(),
    time_zone: z.string(),
    is_recurring: z.boolean(),
    unlocking_criteria: z.string(),
    completion_criteria: z.string(),
    comment_count: z.number(),
    root_comment_count: z.number(),
    cheer_count: z.number(),
    creator: z.object({
      short_bio: z.string(),
      referral_count: z.number(),
      id: z.number(),
      first_name: z.string(),
      last_name: z.string(),
      name: z.string(),
      enabled_features: z.object({ private_chat: z.boolean() }),
      avatar_url: z.string(),
      has_avatar: z.boolean(),
      primary_segment: z
        .object({ id: z.number(), title: z.string() })
        .optional(),
      app_deep_link_path: z.string(),
      background_image_url: z.string(),
      membership: z.object({
        badge: z.null(),
        role: z.string(),
        created_at: z.string(),
        updated_at: z.string(),
        network_role: z.string(),
      }),
    }),
    header: z.object({
      is_default: z.boolean().optional(),
      image_url: z.string().optional(),
      large_url: z.string().optional(),
    }),
    default_image_url: z.string(),
    all_slugs: z.array(z.string()),
    title: z.string(),
    description: z.string(),
    is_profane: z.boolean(),
    filter_group_capitalized: z.string(),
    app_deep_link_path: z.string(),
    space_tag_ids: z.array(z.number()),
    space_type: z.string(),
    has_external_event_link: z.boolean(),
    rsvp_yes_count: z.number(),
    rsvp_maybe_count: z.number(),
    rsvp_no_count: z.number(),
    event_instance: z.object({
      id: z.string(),
      starts_at: z.string(),
      ends_at: z.string(),
      index: z.string(),
      effective_lock_rsvps: z.boolean(),
      rsvp_yes_count: z.number(),
      rsvp_maybe_count: z.number(),
      rsvp_no_count: z.number(),
      has_previous: z.boolean(),
      has_next: z.boolean(),
      attendees: z.array(z.object({ id: z.number(), avatar_url: z.string() })),
    }),
    is_thin: z.boolean(),
  }),
});
export type ryEvent = z.infer<typeof ryEvent>;
